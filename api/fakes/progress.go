// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"
)

type Progress struct {
	SetTotalStub        func(int64)
	setTotalMutex       sync.RWMutex
	setTotalArgsForCall []struct {
		arg1 int64
	}
	NewBarReaderStub        func(io.Reader) io.Reader
	newBarReaderMutex       sync.RWMutex
	newBarReaderArgsForCall []struct {
		arg1 io.Reader
	}
	newBarReaderReturns struct {
		result1 io.Reader
	}
	KickoffStub        func()
	kickoffMutex       sync.RWMutex
	kickoffArgsForCall []struct{}
	EndStub            func()
	endMutex           sync.RWMutex
	endArgsForCall     []struct{}
	invocations        map[string][][]interface{}
	invocationsMutex   sync.RWMutex
}

func (fake *Progress) SetTotal(arg1 int64) {
	fake.setTotalMutex.Lock()
	fake.setTotalArgsForCall = append(fake.setTotalArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("SetTotal", []interface{}{arg1})
	fake.setTotalMutex.Unlock()
	if fake.SetTotalStub != nil {
		fake.SetTotalStub(arg1)
	}
}

func (fake *Progress) SetTotalCallCount() int {
	fake.setTotalMutex.RLock()
	defer fake.setTotalMutex.RUnlock()
	return len(fake.setTotalArgsForCall)
}

func (fake *Progress) SetTotalArgsForCall(i int) int64 {
	fake.setTotalMutex.RLock()
	defer fake.setTotalMutex.RUnlock()
	return fake.setTotalArgsForCall[i].arg1
}

func (fake *Progress) NewBarReader(arg1 io.Reader) io.Reader {
	fake.newBarReaderMutex.Lock()
	fake.newBarReaderArgsForCall = append(fake.newBarReaderArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	fake.recordInvocation("NewBarReader", []interface{}{arg1})
	fake.newBarReaderMutex.Unlock()
	if fake.NewBarReaderStub != nil {
		return fake.NewBarReaderStub(arg1)
	} else {
		return fake.newBarReaderReturns.result1
	}
}

func (fake *Progress) NewBarReaderCallCount() int {
	fake.newBarReaderMutex.RLock()
	defer fake.newBarReaderMutex.RUnlock()
	return len(fake.newBarReaderArgsForCall)
}

func (fake *Progress) NewBarReaderArgsForCall(i int) io.Reader {
	fake.newBarReaderMutex.RLock()
	defer fake.newBarReaderMutex.RUnlock()
	return fake.newBarReaderArgsForCall[i].arg1
}

func (fake *Progress) NewBarReaderReturns(result1 io.Reader) {
	fake.NewBarReaderStub = nil
	fake.newBarReaderReturns = struct {
		result1 io.Reader
	}{result1}
}

func (fake *Progress) Kickoff() {
	fake.kickoffMutex.Lock()
	fake.kickoffArgsForCall = append(fake.kickoffArgsForCall, struct{}{})
	fake.recordInvocation("Kickoff", []interface{}{})
	fake.kickoffMutex.Unlock()
	if fake.KickoffStub != nil {
		fake.KickoffStub()
	}
}

func (fake *Progress) KickoffCallCount() int {
	fake.kickoffMutex.RLock()
	defer fake.kickoffMutex.RUnlock()
	return len(fake.kickoffArgsForCall)
}

func (fake *Progress) End() {
	fake.endMutex.Lock()
	fake.endArgsForCall = append(fake.endArgsForCall, struct{}{})
	fake.recordInvocation("End", []interface{}{})
	fake.endMutex.Unlock()
	if fake.EndStub != nil {
		fake.EndStub()
	}
}

func (fake *Progress) EndCallCount() int {
	fake.endMutex.RLock()
	defer fake.endMutex.RUnlock()
	return len(fake.endArgsForCall)
}

func (fake *Progress) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setTotalMutex.RLock()
	defer fake.setTotalMutex.RUnlock()
	fake.newBarReaderMutex.RLock()
	defer fake.newBarReaderMutex.RUnlock()
	fake.kickoffMutex.RLock()
	defer fake.kickoffMutex.RUnlock()
	fake.endMutex.RLock()
	defer fake.endMutex.RUnlock()
	return fake.invocations
}

func (fake *Progress) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
