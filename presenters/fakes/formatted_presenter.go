// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
	"github.com/pivotal-cf/om/models"
	"github.com/pivotal-cf/om/presenters"
)

type FormattedPresenter struct {
	PresentAvailableProductsStub        func([]models.Product)
	presentAvailableProductsMutex       sync.RWMutex
	presentAvailableProductsArgsForCall []struct {
		arg1 []models.Product
	}
	PresentCertificateAuthoritiesStub        func([]api.CA)
	presentCertificateAuthoritiesMutex       sync.RWMutex
	presentCertificateAuthoritiesArgsForCall []struct {
		arg1 []api.CA
	}
	PresentCertificateAuthorityStub        func(api.CA)
	presentCertificateAuthorityMutex       sync.RWMutex
	presentCertificateAuthorityArgsForCall []struct {
		arg1 api.CA
	}
	PresentCredentialReferencesStub        func([]string)
	presentCredentialReferencesMutex       sync.RWMutex
	presentCredentialReferencesArgsForCall []struct {
		arg1 []string
	}
	PresentCredentialsStub        func(map[string]string)
	presentCredentialsMutex       sync.RWMutex
	presentCredentialsArgsForCall []struct {
		arg1 map[string]string
	}
	PresentDeployedProductsStub        func([]api.DiagnosticProduct)
	presentDeployedProductsMutex       sync.RWMutex
	presentDeployedProductsArgsForCall []struct {
		arg1 []api.DiagnosticProduct
	}
	PresentErrandsStub        func([]models.Errand)
	presentErrandsMutex       sync.RWMutex
	presentErrandsArgsForCall []struct {
		arg1 []models.Errand
	}
	PresentInstallationsStub        func([]models.Installation)
	presentInstallationsMutex       sync.RWMutex
	presentInstallationsArgsForCall []struct {
		arg1 []models.Installation
	}
	PresentPendingChangesStub        func([]api.ProductChange)
	presentPendingChangesMutex       sync.RWMutex
	presentPendingChangesArgsForCall []struct {
		arg1 []api.ProductChange
	}
	PresentStagedProductsStub        func([]api.DiagnosticProduct)
	presentStagedProductsMutex       sync.RWMutex
	presentStagedProductsArgsForCall []struct {
		arg1 []api.DiagnosticProduct
	}
	SetFormatStub        func(string)
	setFormatMutex       sync.RWMutex
	setFormatArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FormattedPresenter) PresentAvailableProducts(arg1 []models.Product) {
	var arg1Copy []models.Product
	if arg1 != nil {
		arg1Copy = make([]models.Product, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentAvailableProductsMutex.Lock()
	fake.presentAvailableProductsArgsForCall = append(fake.presentAvailableProductsArgsForCall, struct {
		arg1 []models.Product
	}{arg1Copy})
	fake.recordInvocation("PresentAvailableProducts", []interface{}{arg1Copy})
	fake.presentAvailableProductsMutex.Unlock()
	if fake.PresentAvailableProductsStub != nil {
		fake.PresentAvailableProductsStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentAvailableProductsCallCount() int {
	fake.presentAvailableProductsMutex.RLock()
	defer fake.presentAvailableProductsMutex.RUnlock()
	return len(fake.presentAvailableProductsArgsForCall)
}

func (fake *FormattedPresenter) PresentAvailableProductsArgsForCall(i int) []models.Product {
	fake.presentAvailableProductsMutex.RLock()
	defer fake.presentAvailableProductsMutex.RUnlock()
	return fake.presentAvailableProductsArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentCertificateAuthorities(arg1 []api.CA) {
	var arg1Copy []api.CA
	if arg1 != nil {
		arg1Copy = make([]api.CA, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentCertificateAuthoritiesMutex.Lock()
	fake.presentCertificateAuthoritiesArgsForCall = append(fake.presentCertificateAuthoritiesArgsForCall, struct {
		arg1 []api.CA
	}{arg1Copy})
	fake.recordInvocation("PresentCertificateAuthorities", []interface{}{arg1Copy})
	fake.presentCertificateAuthoritiesMutex.Unlock()
	if fake.PresentCertificateAuthoritiesStub != nil {
		fake.PresentCertificateAuthoritiesStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentCertificateAuthoritiesCallCount() int {
	fake.presentCertificateAuthoritiesMutex.RLock()
	defer fake.presentCertificateAuthoritiesMutex.RUnlock()
	return len(fake.presentCertificateAuthoritiesArgsForCall)
}

func (fake *FormattedPresenter) PresentCertificateAuthoritiesArgsForCall(i int) []api.CA {
	fake.presentCertificateAuthoritiesMutex.RLock()
	defer fake.presentCertificateAuthoritiesMutex.RUnlock()
	return fake.presentCertificateAuthoritiesArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentCertificateAuthority(arg1 api.CA) {
	fake.presentCertificateAuthorityMutex.Lock()
	fake.presentCertificateAuthorityArgsForCall = append(fake.presentCertificateAuthorityArgsForCall, struct {
		arg1 api.CA
	}{arg1})
	fake.recordInvocation("PresentCertificateAuthority", []interface{}{arg1})
	fake.presentCertificateAuthorityMutex.Unlock()
	if fake.PresentCertificateAuthorityStub != nil {
		fake.PresentCertificateAuthorityStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentCertificateAuthorityCallCount() int {
	fake.presentCertificateAuthorityMutex.RLock()
	defer fake.presentCertificateAuthorityMutex.RUnlock()
	return len(fake.presentCertificateAuthorityArgsForCall)
}

func (fake *FormattedPresenter) PresentCertificateAuthorityArgsForCall(i int) api.CA {
	fake.presentCertificateAuthorityMutex.RLock()
	defer fake.presentCertificateAuthorityMutex.RUnlock()
	return fake.presentCertificateAuthorityArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentCredentialReferences(arg1 []string) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentCredentialReferencesMutex.Lock()
	fake.presentCredentialReferencesArgsForCall = append(fake.presentCredentialReferencesArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("PresentCredentialReferences", []interface{}{arg1Copy})
	fake.presentCredentialReferencesMutex.Unlock()
	if fake.PresentCredentialReferencesStub != nil {
		fake.PresentCredentialReferencesStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentCredentialReferencesCallCount() int {
	fake.presentCredentialReferencesMutex.RLock()
	defer fake.presentCredentialReferencesMutex.RUnlock()
	return len(fake.presentCredentialReferencesArgsForCall)
}

func (fake *FormattedPresenter) PresentCredentialReferencesArgsForCall(i int) []string {
	fake.presentCredentialReferencesMutex.RLock()
	defer fake.presentCredentialReferencesMutex.RUnlock()
	return fake.presentCredentialReferencesArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentCredentials(arg1 map[string]string) {
	fake.presentCredentialsMutex.Lock()
	fake.presentCredentialsArgsForCall = append(fake.presentCredentialsArgsForCall, struct {
		arg1 map[string]string
	}{arg1})
	fake.recordInvocation("PresentCredentials", []interface{}{arg1})
	fake.presentCredentialsMutex.Unlock()
	if fake.PresentCredentialsStub != nil {
		fake.PresentCredentialsStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentCredentialsCallCount() int {
	fake.presentCredentialsMutex.RLock()
	defer fake.presentCredentialsMutex.RUnlock()
	return len(fake.presentCredentialsArgsForCall)
}

func (fake *FormattedPresenter) PresentCredentialsArgsForCall(i int) map[string]string {
	fake.presentCredentialsMutex.RLock()
	defer fake.presentCredentialsMutex.RUnlock()
	return fake.presentCredentialsArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentDeployedProducts(arg1 []api.DiagnosticProduct) {
	var arg1Copy []api.DiagnosticProduct
	if arg1 != nil {
		arg1Copy = make([]api.DiagnosticProduct, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentDeployedProductsMutex.Lock()
	fake.presentDeployedProductsArgsForCall = append(fake.presentDeployedProductsArgsForCall, struct {
		arg1 []api.DiagnosticProduct
	}{arg1Copy})
	fake.recordInvocation("PresentDeployedProducts", []interface{}{arg1Copy})
	fake.presentDeployedProductsMutex.Unlock()
	if fake.PresentDeployedProductsStub != nil {
		fake.PresentDeployedProductsStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentDeployedProductsCallCount() int {
	fake.presentDeployedProductsMutex.RLock()
	defer fake.presentDeployedProductsMutex.RUnlock()
	return len(fake.presentDeployedProductsArgsForCall)
}

func (fake *FormattedPresenter) PresentDeployedProductsArgsForCall(i int) []api.DiagnosticProduct {
	fake.presentDeployedProductsMutex.RLock()
	defer fake.presentDeployedProductsMutex.RUnlock()
	return fake.presentDeployedProductsArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentErrands(arg1 []models.Errand) {
	var arg1Copy []models.Errand
	if arg1 != nil {
		arg1Copy = make([]models.Errand, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentErrandsMutex.Lock()
	fake.presentErrandsArgsForCall = append(fake.presentErrandsArgsForCall, struct {
		arg1 []models.Errand
	}{arg1Copy})
	fake.recordInvocation("PresentErrands", []interface{}{arg1Copy})
	fake.presentErrandsMutex.Unlock()
	if fake.PresentErrandsStub != nil {
		fake.PresentErrandsStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentErrandsCallCount() int {
	fake.presentErrandsMutex.RLock()
	defer fake.presentErrandsMutex.RUnlock()
	return len(fake.presentErrandsArgsForCall)
}

func (fake *FormattedPresenter) PresentErrandsArgsForCall(i int) []models.Errand {
	fake.presentErrandsMutex.RLock()
	defer fake.presentErrandsMutex.RUnlock()
	return fake.presentErrandsArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentInstallations(arg1 []models.Installation) {
	var arg1Copy []models.Installation
	if arg1 != nil {
		arg1Copy = make([]models.Installation, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentInstallationsMutex.Lock()
	fake.presentInstallationsArgsForCall = append(fake.presentInstallationsArgsForCall, struct {
		arg1 []models.Installation
	}{arg1Copy})
	fake.recordInvocation("PresentInstallations", []interface{}{arg1Copy})
	fake.presentInstallationsMutex.Unlock()
	if fake.PresentInstallationsStub != nil {
		fake.PresentInstallationsStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentInstallationsCallCount() int {
	fake.presentInstallationsMutex.RLock()
	defer fake.presentInstallationsMutex.RUnlock()
	return len(fake.presentInstallationsArgsForCall)
}

func (fake *FormattedPresenter) PresentInstallationsArgsForCall(i int) []models.Installation {
	fake.presentInstallationsMutex.RLock()
	defer fake.presentInstallationsMutex.RUnlock()
	return fake.presentInstallationsArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentPendingChanges(arg1 []api.ProductChange) {
	var arg1Copy []api.ProductChange
	if arg1 != nil {
		arg1Copy = make([]api.ProductChange, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentPendingChangesMutex.Lock()
	fake.presentPendingChangesArgsForCall = append(fake.presentPendingChangesArgsForCall, struct {
		arg1 []api.ProductChange
	}{arg1Copy})
	fake.recordInvocation("PresentPendingChanges", []interface{}{arg1Copy})
	fake.presentPendingChangesMutex.Unlock()
	if fake.PresentPendingChangesStub != nil {
		fake.PresentPendingChangesStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentPendingChangesCallCount() int {
	fake.presentPendingChangesMutex.RLock()
	defer fake.presentPendingChangesMutex.RUnlock()
	return len(fake.presentPendingChangesArgsForCall)
}

func (fake *FormattedPresenter) PresentPendingChangesArgsForCall(i int) []api.ProductChange {
	fake.presentPendingChangesMutex.RLock()
	defer fake.presentPendingChangesMutex.RUnlock()
	return fake.presentPendingChangesArgsForCall[i].arg1
}

func (fake *FormattedPresenter) PresentStagedProducts(arg1 []api.DiagnosticProduct) {
	var arg1Copy []api.DiagnosticProduct
	if arg1 != nil {
		arg1Copy = make([]api.DiagnosticProduct, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentStagedProductsMutex.Lock()
	fake.presentStagedProductsArgsForCall = append(fake.presentStagedProductsArgsForCall, struct {
		arg1 []api.DiagnosticProduct
	}{arg1Copy})
	fake.recordInvocation("PresentStagedProducts", []interface{}{arg1Copy})
	fake.presentStagedProductsMutex.Unlock()
	if fake.PresentStagedProductsStub != nil {
		fake.PresentStagedProductsStub(arg1)
	}
}

func (fake *FormattedPresenter) PresentStagedProductsCallCount() int {
	fake.presentStagedProductsMutex.RLock()
	defer fake.presentStagedProductsMutex.RUnlock()
	return len(fake.presentStagedProductsArgsForCall)
}

func (fake *FormattedPresenter) PresentStagedProductsArgsForCall(i int) []api.DiagnosticProduct {
	fake.presentStagedProductsMutex.RLock()
	defer fake.presentStagedProductsMutex.RUnlock()
	return fake.presentStagedProductsArgsForCall[i].arg1
}

func (fake *FormattedPresenter) SetFormat(arg1 string) {
	fake.setFormatMutex.Lock()
	fake.setFormatArgsForCall = append(fake.setFormatArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetFormat", []interface{}{arg1})
	fake.setFormatMutex.Unlock()
	if fake.SetFormatStub != nil {
		fake.SetFormatStub(arg1)
	}
}

func (fake *FormattedPresenter) SetFormatCallCount() int {
	fake.setFormatMutex.RLock()
	defer fake.setFormatMutex.RUnlock()
	return len(fake.setFormatArgsForCall)
}

func (fake *FormattedPresenter) SetFormatArgsForCall(i int) string {
	fake.setFormatMutex.RLock()
	defer fake.setFormatMutex.RUnlock()
	return fake.setFormatArgsForCall[i].arg1
}

func (fake *FormattedPresenter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.presentAvailableProductsMutex.RLock()
	defer fake.presentAvailableProductsMutex.RUnlock()
	fake.presentCertificateAuthoritiesMutex.RLock()
	defer fake.presentCertificateAuthoritiesMutex.RUnlock()
	fake.presentCertificateAuthorityMutex.RLock()
	defer fake.presentCertificateAuthorityMutex.RUnlock()
	fake.presentCredentialReferencesMutex.RLock()
	defer fake.presentCredentialReferencesMutex.RUnlock()
	fake.presentCredentialsMutex.RLock()
	defer fake.presentCredentialsMutex.RUnlock()
	fake.presentDeployedProductsMutex.RLock()
	defer fake.presentDeployedProductsMutex.RUnlock()
	fake.presentErrandsMutex.RLock()
	defer fake.presentErrandsMutex.RUnlock()
	fake.presentInstallationsMutex.RLock()
	defer fake.presentInstallationsMutex.RUnlock()
	fake.presentPendingChangesMutex.RLock()
	defer fake.presentPendingChangesMutex.RUnlock()
	fake.presentStagedProductsMutex.RLock()
	defer fake.presentStagedProductsMutex.RUnlock()
	fake.setFormatMutex.RLock()
	defer fake.setFormatMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FormattedPresenter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ presenters.FormattedPresenter = new(FormattedPresenter)
