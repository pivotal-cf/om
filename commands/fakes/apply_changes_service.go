// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type ApplyChangesService struct {
	CreateInstallationStub        func(bool, bool) (api.InstallationsServiceOutput, error)
	createInstallationMutex       sync.RWMutex
	createInstallationArgsForCall []struct {
		arg1 bool
		arg2 bool
	}
	createInstallationReturns struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}
	createInstallationReturnsOnCall map[int]struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}
	RunningInstallationStub        func() (api.InstallationsServiceOutput, error)
	runningInstallationMutex       sync.RWMutex
	runningInstallationArgsForCall []struct{}
	runningInstallationReturns     struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}
	runningInstallationReturnsOnCall map[int]struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}
	GetCurrentInstallationLogsStub        func() (api.InstallationsServiceOutput, error)
	getCurrentInstallationLogsMutex       sync.RWMutex
	getCurrentInstallationLogsArgsForCall []struct{}
	getCurrentInstallationLogsReturns     struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}
	getCurrentInstallationLogsReturnsOnCall map[int]struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ApplyChangesService) CreateInstallation(arg1 bool, arg2 bool) (api.InstallationsServiceOutput, error) {
	fake.createInstallationMutex.Lock()
	ret, specificReturn := fake.createInstallationReturnsOnCall[len(fake.createInstallationArgsForCall)]
	fake.createInstallationArgsForCall = append(fake.createInstallationArgsForCall, struct {
		arg1 bool
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("CreateInstallation", []interface{}{arg1, arg2})
	fake.createInstallationMutex.Unlock()
	if fake.CreateInstallationStub != nil {
		return fake.CreateInstallationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createInstallationReturns.result1, fake.createInstallationReturns.result2
}

func (fake *ApplyChangesService) CreateInstallationCallCount() int {
	fake.createInstallationMutex.RLock()
	defer fake.createInstallationMutex.RUnlock()
	return len(fake.createInstallationArgsForCall)
}

func (fake *ApplyChangesService) CreateInstallationArgsForCall(i int) (bool, bool) {
	fake.createInstallationMutex.RLock()
	defer fake.createInstallationMutex.RUnlock()
	return fake.createInstallationArgsForCall[i].arg1, fake.createInstallationArgsForCall[i].arg2
}

func (fake *ApplyChangesService) CreateInstallationReturns(result1 api.InstallationsServiceOutput, result2 error) {
	fake.CreateInstallationStub = nil
	fake.createInstallationReturns = struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *ApplyChangesService) CreateInstallationReturnsOnCall(i int, result1 api.InstallationsServiceOutput, result2 error) {
	fake.CreateInstallationStub = nil
	if fake.createInstallationReturnsOnCall == nil {
		fake.createInstallationReturnsOnCall = make(map[int]struct {
			result1 api.InstallationsServiceOutput
			result2 error
		})
	}
	fake.createInstallationReturnsOnCall[i] = struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *ApplyChangesService) RunningInstallation() (api.InstallationsServiceOutput, error) {
	fake.runningInstallationMutex.Lock()
	ret, specificReturn := fake.runningInstallationReturnsOnCall[len(fake.runningInstallationArgsForCall)]
	fake.runningInstallationArgsForCall = append(fake.runningInstallationArgsForCall, struct{}{})
	fake.recordInvocation("RunningInstallation", []interface{}{})
	fake.runningInstallationMutex.Unlock()
	if fake.RunningInstallationStub != nil {
		return fake.RunningInstallationStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.runningInstallationReturns.result1, fake.runningInstallationReturns.result2
}

func (fake *ApplyChangesService) RunningInstallationCallCount() int {
	fake.runningInstallationMutex.RLock()
	defer fake.runningInstallationMutex.RUnlock()
	return len(fake.runningInstallationArgsForCall)
}

func (fake *ApplyChangesService) RunningInstallationReturns(result1 api.InstallationsServiceOutput, result2 error) {
	fake.RunningInstallationStub = nil
	fake.runningInstallationReturns = struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *ApplyChangesService) RunningInstallationReturnsOnCall(i int, result1 api.InstallationsServiceOutput, result2 error) {
	fake.RunningInstallationStub = nil
	if fake.runningInstallationReturnsOnCall == nil {
		fake.runningInstallationReturnsOnCall = make(map[int]struct {
			result1 api.InstallationsServiceOutput
			result2 error
		})
	}
	fake.runningInstallationReturnsOnCall[i] = struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *ApplyChangesService) GetCurrentInstallationLogs() (api.InstallationsServiceOutput, error) {
	fake.getCurrentInstallationLogsMutex.Lock()
	ret, specificReturn := fake.getCurrentInstallationLogsReturnsOnCall[len(fake.getCurrentInstallationLogsArgsForCall)]
	fake.getCurrentInstallationLogsArgsForCall = append(fake.getCurrentInstallationLogsArgsForCall, struct{}{})
	fake.recordInvocation("GetCurrentInstallationLogs", []interface{}{})
	fake.getCurrentInstallationLogsMutex.Unlock()
	if fake.GetCurrentInstallationLogsStub != nil {
		return fake.GetCurrentInstallationLogsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCurrentInstallationLogsReturns.result1, fake.getCurrentInstallationLogsReturns.result2
}

func (fake *ApplyChangesService) GetCurrentInstallationLogsCallCount() int {
	fake.getCurrentInstallationLogsMutex.RLock()
	defer fake.getCurrentInstallationLogsMutex.RUnlock()
	return len(fake.getCurrentInstallationLogsArgsForCall)
}

func (fake *ApplyChangesService) GetCurrentInstallationLogsReturns(result1 api.InstallationsServiceOutput, result2 error) {
	fake.GetCurrentInstallationLogsStub = nil
	fake.getCurrentInstallationLogsReturns = struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *ApplyChangesService) GetCurrentInstallationLogsReturnsOnCall(i int, result1 api.InstallationsServiceOutput, result2 error) {
	fake.GetCurrentInstallationLogsStub = nil
	if fake.getCurrentInstallationLogsReturnsOnCall == nil {
		fake.getCurrentInstallationLogsReturnsOnCall = make(map[int]struct {
			result1 api.InstallationsServiceOutput
			result2 error
		})
	}
	fake.getCurrentInstallationLogsReturnsOnCall[i] = struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *ApplyChangesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createInstallationMutex.RLock()
	defer fake.createInstallationMutex.RUnlock()
	fake.runningInstallationMutex.RLock()
	defer fake.runningInstallationMutex.RUnlock()
	fake.getCurrentInstallationLogsMutex.RLock()
	defer fake.getCurrentInstallationLogsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ApplyChangesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
