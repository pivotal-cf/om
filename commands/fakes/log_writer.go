// This file was generated by counterfeiter
package fakes

import "sync"

type LogWriter struct {
	FlushStub        func(logs string) error
	flushMutex       sync.RWMutex
	flushArgsForCall []struct {
		logs string
	}
	flushReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LogWriter) Flush(logs string) error {
	fake.flushMutex.Lock()
	fake.flushArgsForCall = append(fake.flushArgsForCall, struct {
		logs string
	}{logs})
	fake.recordInvocation("Flush", []interface{}{logs})
	fake.flushMutex.Unlock()
	if fake.FlushStub != nil {
		return fake.FlushStub(logs)
	} else {
		return fake.flushReturns.result1
	}
}

func (fake *LogWriter) FlushCallCount() int {
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	return len(fake.flushArgsForCall)
}

func (fake *LogWriter) FlushArgsForCall(i int) string {
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	return fake.flushArgsForCall[i].logs
}

func (fake *LogWriter) FlushReturns(result1 error) {
	fake.FlushStub = nil
	fake.flushReturns = struct {
		result1 error
	}{result1}
}

func (fake *LogWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	return fake.invocations
}

func (fake *LogWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
