// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type ExpiringLicensesService struct {
	ListExpiringLicensesStub        func(string) ([]api.ExpiringLicenseOutPut, error)
	listExpiringLicensesMutex       sync.RWMutex
	listExpiringLicensesArgsForCall []struct {
		arg1 string
	}
	listExpiringLicensesReturns struct {
		result1 []api.ExpiringLicenseOutPut
		result2 error
	}
	listExpiringLicensesReturnsOnCall map[int]struct {
		result1 []api.ExpiringLicenseOutPut
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ExpiringLicensesService) ListExpiringLicenses(arg1 string) ([]api.ExpiringLicenseOutPut, error) {
	fake.listExpiringLicensesMutex.Lock()
	ret, specificReturn := fake.listExpiringLicensesReturnsOnCall[len(fake.listExpiringLicensesArgsForCall)]
	fake.listExpiringLicensesArgsForCall = append(fake.listExpiringLicensesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListExpiringLicenses", []interface{}{arg1})
	fake.listExpiringLicensesMutex.Unlock()
	if fake.ListExpiringLicensesStub != nil {
		return fake.ListExpiringLicensesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listExpiringLicensesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ExpiringLicensesService) ListExpiringLicensesCallCount() int {
	fake.listExpiringLicensesMutex.RLock()
	defer fake.listExpiringLicensesMutex.RUnlock()
	return len(fake.listExpiringLicensesArgsForCall)
}

func (fake *ExpiringLicensesService) ListExpiringLicensesCalls(stub func(string) ([]api.ExpiringLicenseOutPut, error)) {
	fake.listExpiringLicensesMutex.Lock()
	defer fake.listExpiringLicensesMutex.Unlock()
	fake.ListExpiringLicensesStub = stub
}

func (fake *ExpiringLicensesService) ListExpiringLicensesArgsForCall(i int) string {
	fake.listExpiringLicensesMutex.RLock()
	defer fake.listExpiringLicensesMutex.RUnlock()
	argsForCall := fake.listExpiringLicensesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ExpiringLicensesService) ListExpiringLicensesReturns(result1 []api.ExpiringLicenseOutPut, result2 error) {
	fake.listExpiringLicensesMutex.Lock()
	defer fake.listExpiringLicensesMutex.Unlock()
	fake.ListExpiringLicensesStub = nil
	fake.listExpiringLicensesReturns = struct {
		result1 []api.ExpiringLicenseOutPut
		result2 error
	}{result1, result2}
}

func (fake *ExpiringLicensesService) ListExpiringLicensesReturnsOnCall(i int, result1 []api.ExpiringLicenseOutPut, result2 error) {
	fake.listExpiringLicensesMutex.Lock()
	defer fake.listExpiringLicensesMutex.Unlock()
	fake.ListExpiringLicensesStub = nil
	if fake.listExpiringLicensesReturnsOnCall == nil {
		fake.listExpiringLicensesReturnsOnCall = make(map[int]struct {
			result1 []api.ExpiringLicenseOutPut
			result2 error
		})
	}
	fake.listExpiringLicensesReturnsOnCall[i] = struct {
		result1 []api.ExpiringLicenseOutPut
		result2 error
	}{result1, result2}
}

func (fake *ExpiringLicensesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listExpiringLicensesMutex.RLock()
	defer fake.listExpiringLicensesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ExpiringLicensesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
