// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
	"github.com/pivotal-cf/om/configparser"
)

type ConfigParser struct {
	ParsePropertiesStub        func(productGUID string, name configparser.PropertyName, property api.ResponseProperty, handler configparser.CredentialHandler) (map[string]interface{}, error)
	parsePropertiesMutex       sync.RWMutex
	parsePropertiesArgsForCall []struct {
		productGUID string
		name        configparser.PropertyName
		property    api.ResponseProperty
		handler     configparser.CredentialHandler
	}
	parsePropertiesReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	parsePropertiesReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ConfigParser) ParseProperties(productGUID string, name configparser.PropertyName, property api.ResponseProperty, handler configparser.CredentialHandler) (map[string]interface{}, error) {
	fake.parsePropertiesMutex.Lock()
	ret, specificReturn := fake.parsePropertiesReturnsOnCall[len(fake.parsePropertiesArgsForCall)]
	fake.parsePropertiesArgsForCall = append(fake.parsePropertiesArgsForCall, struct {
		productGUID string
		name        configparser.PropertyName
		property    api.ResponseProperty
		handler     configparser.CredentialHandler
	}{productGUID, name, property, handler})
	fake.recordInvocation("ParseProperties", []interface{}{productGUID, name, property, handler})
	fake.parsePropertiesMutex.Unlock()
	if fake.ParsePropertiesStub != nil {
		return fake.ParsePropertiesStub(productGUID, name, property, handler)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.parsePropertiesReturns.result1, fake.parsePropertiesReturns.result2
}

func (fake *ConfigParser) ParsePropertiesCallCount() int {
	fake.parsePropertiesMutex.RLock()
	defer fake.parsePropertiesMutex.RUnlock()
	return len(fake.parsePropertiesArgsForCall)
}

func (fake *ConfigParser) ParsePropertiesArgsForCall(i int) (string, configparser.PropertyName, api.ResponseProperty, configparser.CredentialHandler) {
	fake.parsePropertiesMutex.RLock()
	defer fake.parsePropertiesMutex.RUnlock()
	return fake.parsePropertiesArgsForCall[i].productGUID, fake.parsePropertiesArgsForCall[i].name, fake.parsePropertiesArgsForCall[i].property, fake.parsePropertiesArgsForCall[i].handler
}

func (fake *ConfigParser) ParsePropertiesReturns(result1 map[string]interface{}, result2 error) {
	fake.ParsePropertiesStub = nil
	fake.parsePropertiesReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *ConfigParser) ParsePropertiesReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.ParsePropertiesStub = nil
	if fake.parsePropertiesReturnsOnCall == nil {
		fake.parsePropertiesReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.parsePropertiesReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *ConfigParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parsePropertiesMutex.RLock()
	defer fake.parsePropertiesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ConfigParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
