// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type ConfigureDirectorService struct {
	UpdateStagedDirectorAvailabilityZonesStub        func(api.AvailabilityZoneInput) error
	updateStagedDirectorAvailabilityZonesMutex       sync.RWMutex
	updateStagedDirectorAvailabilityZonesArgsForCall []struct {
		arg1 api.AvailabilityZoneInput
	}
	updateStagedDirectorAvailabilityZonesReturns struct {
		result1 error
	}
	UpdateStagedDirectorNetworksStub        func(api.NetworkInput) error
	updateStagedDirectorNetworksMutex       sync.RWMutex
	updateStagedDirectorNetworksArgsForCall []struct {
		arg1 api.NetworkInput
	}
	updateStagedDirectorNetworksReturns struct {
		result1 error
	}
	UpdateStagedDirectorNetworkAndAZStub        func(api.NetworkAndAZConfiguration) error
	updateStagedDirectorNetworkAndAZMutex       sync.RWMutex
	updateStagedDirectorNetworkAndAZArgsForCall []struct {
		arg1 api.NetworkAndAZConfiguration
	}
	updateStagedDirectorNetworkAndAZReturns struct {
		result1 error
	}
	UpdateStagedDirectorPropertiesStub        func(api.DirectorProperties) error
	updateStagedDirectorPropertiesMutex       sync.RWMutex
	updateStagedDirectorPropertiesArgsForCall []struct {
		arg1 api.DirectorProperties
	}
	updateStagedDirectorPropertiesReturns struct {
		result1 error
	}
	ListStagedProductJobsStub        func(string) (map[string]string, error)
	listStagedProductJobsMutex       sync.RWMutex
	listStagedProductJobsArgsForCall []struct {
		arg1 string
	}
	listStagedProductJobsReturns struct {
		result1 map[string]string
		result2 error
	}
	GetStagedProductJobResourceConfigStub        func(string, string) (api.JobProperties, error)
	getStagedProductJobResourceConfigMutex       sync.RWMutex
	getStagedProductJobResourceConfigArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getStagedProductJobResourceConfigReturns struct {
		result1 api.JobProperties
		result2 error
	}
	UpdateStagedProductJobResourceConfigStub        func(string, string, api.JobProperties) error
	updateStagedProductJobResourceConfigMutex       sync.RWMutex
	updateStagedProductJobResourceConfigArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 api.JobProperties
	}
	updateStagedProductJobResourceConfigReturns struct {
		result1 error
	}
	GetStagedProductByNameStub        func(name string) (api.StagedProductsFindOutput, error)
	getStagedProductByNameMutex       sync.RWMutex
	getStagedProductByNameArgsForCall []struct {
		name string
	}
	getStagedProductByNameReturns struct {
		result1 api.StagedProductsFindOutput
		result2 error
	}
	GetStagedProductManifestStub        func(guid string) (manifest string, err error)
	getStagedProductManifestMutex       sync.RWMutex
	getStagedProductManifestArgsForCall []struct {
		guid string
	}
	getStagedProductManifestReturns struct {
		result1 string
		result2 error
	}
	CreateStagedVMExtensionStub        func(api.CreateVMExtension) error
	createStagedVMExtensionMutex       sync.RWMutex
	createStagedVMExtensionArgsForCall []struct {
		arg1 api.CreateVMExtension
	}
	createStagedVMExtensionReturns struct {
		result1 error
	}
	ListStagedVMExtensionsStub        func() ([]api.VMExtension, error)
	listStagedVMExtensionsMutex       sync.RWMutex
	listStagedVMExtensionsArgsForCall []struct{}
	listStagedVMExtensionsReturns     struct {
		result1 []api.VMExtension
		result2 error
	}
	DeleteVMExtensionStub        func(name string) error
	deleteVMExtensionMutex       sync.RWMutex
	deleteVMExtensionArgsForCall []struct {
		name string
	}
	deleteVMExtensionReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorAvailabilityZones(arg1 api.AvailabilityZoneInput) error {
	fake.updateStagedDirectorAvailabilityZonesMutex.Lock()
	fake.updateStagedDirectorAvailabilityZonesArgsForCall = append(fake.updateStagedDirectorAvailabilityZonesArgsForCall, struct {
		arg1 api.AvailabilityZoneInput
	}{arg1})
	fake.recordInvocation("UpdateStagedDirectorAvailabilityZones", []interface{}{arg1})
	fake.updateStagedDirectorAvailabilityZonesMutex.Unlock()
	if fake.UpdateStagedDirectorAvailabilityZonesStub != nil {
		return fake.UpdateStagedDirectorAvailabilityZonesStub(arg1)
	} else {
		return fake.updateStagedDirectorAvailabilityZonesReturns.result1
	}
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorAvailabilityZonesCallCount() int {
	fake.updateStagedDirectorAvailabilityZonesMutex.RLock()
	defer fake.updateStagedDirectorAvailabilityZonesMutex.RUnlock()
	return len(fake.updateStagedDirectorAvailabilityZonesArgsForCall)
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorAvailabilityZonesArgsForCall(i int) api.AvailabilityZoneInput {
	fake.updateStagedDirectorAvailabilityZonesMutex.RLock()
	defer fake.updateStagedDirectorAvailabilityZonesMutex.RUnlock()
	return fake.updateStagedDirectorAvailabilityZonesArgsForCall[i].arg1
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorAvailabilityZonesReturns(result1 error) {
	fake.UpdateStagedDirectorAvailabilityZonesStub = nil
	fake.updateStagedDirectorAvailabilityZonesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorNetworks(arg1 api.NetworkInput) error {
	fake.updateStagedDirectorNetworksMutex.Lock()
	fake.updateStagedDirectorNetworksArgsForCall = append(fake.updateStagedDirectorNetworksArgsForCall, struct {
		arg1 api.NetworkInput
	}{arg1})
	fake.recordInvocation("UpdateStagedDirectorNetworks", []interface{}{arg1})
	fake.updateStagedDirectorNetworksMutex.Unlock()
	if fake.UpdateStagedDirectorNetworksStub != nil {
		return fake.UpdateStagedDirectorNetworksStub(arg1)
	} else {
		return fake.updateStagedDirectorNetworksReturns.result1
	}
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorNetworksCallCount() int {
	fake.updateStagedDirectorNetworksMutex.RLock()
	defer fake.updateStagedDirectorNetworksMutex.RUnlock()
	return len(fake.updateStagedDirectorNetworksArgsForCall)
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorNetworksArgsForCall(i int) api.NetworkInput {
	fake.updateStagedDirectorNetworksMutex.RLock()
	defer fake.updateStagedDirectorNetworksMutex.RUnlock()
	return fake.updateStagedDirectorNetworksArgsForCall[i].arg1
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorNetworksReturns(result1 error) {
	fake.UpdateStagedDirectorNetworksStub = nil
	fake.updateStagedDirectorNetworksReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorNetworkAndAZ(arg1 api.NetworkAndAZConfiguration) error {
	fake.updateStagedDirectorNetworkAndAZMutex.Lock()
	fake.updateStagedDirectorNetworkAndAZArgsForCall = append(fake.updateStagedDirectorNetworkAndAZArgsForCall, struct {
		arg1 api.NetworkAndAZConfiguration
	}{arg1})
	fake.recordInvocation("UpdateStagedDirectorNetworkAndAZ", []interface{}{arg1})
	fake.updateStagedDirectorNetworkAndAZMutex.Unlock()
	if fake.UpdateStagedDirectorNetworkAndAZStub != nil {
		return fake.UpdateStagedDirectorNetworkAndAZStub(arg1)
	} else {
		return fake.updateStagedDirectorNetworkAndAZReturns.result1
	}
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorNetworkAndAZCallCount() int {
	fake.updateStagedDirectorNetworkAndAZMutex.RLock()
	defer fake.updateStagedDirectorNetworkAndAZMutex.RUnlock()
	return len(fake.updateStagedDirectorNetworkAndAZArgsForCall)
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorNetworkAndAZArgsForCall(i int) api.NetworkAndAZConfiguration {
	fake.updateStagedDirectorNetworkAndAZMutex.RLock()
	defer fake.updateStagedDirectorNetworkAndAZMutex.RUnlock()
	return fake.updateStagedDirectorNetworkAndAZArgsForCall[i].arg1
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorNetworkAndAZReturns(result1 error) {
	fake.UpdateStagedDirectorNetworkAndAZStub = nil
	fake.updateStagedDirectorNetworkAndAZReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorProperties(arg1 api.DirectorProperties) error {
	fake.updateStagedDirectorPropertiesMutex.Lock()
	fake.updateStagedDirectorPropertiesArgsForCall = append(fake.updateStagedDirectorPropertiesArgsForCall, struct {
		arg1 api.DirectorProperties
	}{arg1})
	fake.recordInvocation("UpdateStagedDirectorProperties", []interface{}{arg1})
	fake.updateStagedDirectorPropertiesMutex.Unlock()
	if fake.UpdateStagedDirectorPropertiesStub != nil {
		return fake.UpdateStagedDirectorPropertiesStub(arg1)
	} else {
		return fake.updateStagedDirectorPropertiesReturns.result1
	}
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorPropertiesCallCount() int {
	fake.updateStagedDirectorPropertiesMutex.RLock()
	defer fake.updateStagedDirectorPropertiesMutex.RUnlock()
	return len(fake.updateStagedDirectorPropertiesArgsForCall)
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorPropertiesArgsForCall(i int) api.DirectorProperties {
	fake.updateStagedDirectorPropertiesMutex.RLock()
	defer fake.updateStagedDirectorPropertiesMutex.RUnlock()
	return fake.updateStagedDirectorPropertiesArgsForCall[i].arg1
}

func (fake *ConfigureDirectorService) UpdateStagedDirectorPropertiesReturns(result1 error) {
	fake.UpdateStagedDirectorPropertiesStub = nil
	fake.updateStagedDirectorPropertiesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConfigureDirectorService) ListStagedProductJobs(arg1 string) (map[string]string, error) {
	fake.listStagedProductJobsMutex.Lock()
	fake.listStagedProductJobsArgsForCall = append(fake.listStagedProductJobsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListStagedProductJobs", []interface{}{arg1})
	fake.listStagedProductJobsMutex.Unlock()
	if fake.ListStagedProductJobsStub != nil {
		return fake.ListStagedProductJobsStub(arg1)
	} else {
		return fake.listStagedProductJobsReturns.result1, fake.listStagedProductJobsReturns.result2
	}
}

func (fake *ConfigureDirectorService) ListStagedProductJobsCallCount() int {
	fake.listStagedProductJobsMutex.RLock()
	defer fake.listStagedProductJobsMutex.RUnlock()
	return len(fake.listStagedProductJobsArgsForCall)
}

func (fake *ConfigureDirectorService) ListStagedProductJobsArgsForCall(i int) string {
	fake.listStagedProductJobsMutex.RLock()
	defer fake.listStagedProductJobsMutex.RUnlock()
	return fake.listStagedProductJobsArgsForCall[i].arg1
}

func (fake *ConfigureDirectorService) ListStagedProductJobsReturns(result1 map[string]string, result2 error) {
	fake.ListStagedProductJobsStub = nil
	fake.listStagedProductJobsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *ConfigureDirectorService) GetStagedProductJobResourceConfig(arg1 string, arg2 string) (api.JobProperties, error) {
	fake.getStagedProductJobResourceConfigMutex.Lock()
	fake.getStagedProductJobResourceConfigArgsForCall = append(fake.getStagedProductJobResourceConfigArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetStagedProductJobResourceConfig", []interface{}{arg1, arg2})
	fake.getStagedProductJobResourceConfigMutex.Unlock()
	if fake.GetStagedProductJobResourceConfigStub != nil {
		return fake.GetStagedProductJobResourceConfigStub(arg1, arg2)
	} else {
		return fake.getStagedProductJobResourceConfigReturns.result1, fake.getStagedProductJobResourceConfigReturns.result2
	}
}

func (fake *ConfigureDirectorService) GetStagedProductJobResourceConfigCallCount() int {
	fake.getStagedProductJobResourceConfigMutex.RLock()
	defer fake.getStagedProductJobResourceConfigMutex.RUnlock()
	return len(fake.getStagedProductJobResourceConfigArgsForCall)
}

func (fake *ConfigureDirectorService) GetStagedProductJobResourceConfigArgsForCall(i int) (string, string) {
	fake.getStagedProductJobResourceConfigMutex.RLock()
	defer fake.getStagedProductJobResourceConfigMutex.RUnlock()
	return fake.getStagedProductJobResourceConfigArgsForCall[i].arg1, fake.getStagedProductJobResourceConfigArgsForCall[i].arg2
}

func (fake *ConfigureDirectorService) GetStagedProductJobResourceConfigReturns(result1 api.JobProperties, result2 error) {
	fake.GetStagedProductJobResourceConfigStub = nil
	fake.getStagedProductJobResourceConfigReturns = struct {
		result1 api.JobProperties
		result2 error
	}{result1, result2}
}

func (fake *ConfigureDirectorService) UpdateStagedProductJobResourceConfig(arg1 string, arg2 string, arg3 api.JobProperties) error {
	fake.updateStagedProductJobResourceConfigMutex.Lock()
	fake.updateStagedProductJobResourceConfigArgsForCall = append(fake.updateStagedProductJobResourceConfigArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 api.JobProperties
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateStagedProductJobResourceConfig", []interface{}{arg1, arg2, arg3})
	fake.updateStagedProductJobResourceConfigMutex.Unlock()
	if fake.UpdateStagedProductJobResourceConfigStub != nil {
		return fake.UpdateStagedProductJobResourceConfigStub(arg1, arg2, arg3)
	} else {
		return fake.updateStagedProductJobResourceConfigReturns.result1
	}
}

func (fake *ConfigureDirectorService) UpdateStagedProductJobResourceConfigCallCount() int {
	fake.updateStagedProductJobResourceConfigMutex.RLock()
	defer fake.updateStagedProductJobResourceConfigMutex.RUnlock()
	return len(fake.updateStagedProductJobResourceConfigArgsForCall)
}

func (fake *ConfigureDirectorService) UpdateStagedProductJobResourceConfigArgsForCall(i int) (string, string, api.JobProperties) {
	fake.updateStagedProductJobResourceConfigMutex.RLock()
	defer fake.updateStagedProductJobResourceConfigMutex.RUnlock()
	return fake.updateStagedProductJobResourceConfigArgsForCall[i].arg1, fake.updateStagedProductJobResourceConfigArgsForCall[i].arg2, fake.updateStagedProductJobResourceConfigArgsForCall[i].arg3
}

func (fake *ConfigureDirectorService) UpdateStagedProductJobResourceConfigReturns(result1 error) {
	fake.UpdateStagedProductJobResourceConfigStub = nil
	fake.updateStagedProductJobResourceConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConfigureDirectorService) GetStagedProductByName(name string) (api.StagedProductsFindOutput, error) {
	fake.getStagedProductByNameMutex.Lock()
	fake.getStagedProductByNameArgsForCall = append(fake.getStagedProductByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetStagedProductByName", []interface{}{name})
	fake.getStagedProductByNameMutex.Unlock()
	if fake.GetStagedProductByNameStub != nil {
		return fake.GetStagedProductByNameStub(name)
	} else {
		return fake.getStagedProductByNameReturns.result1, fake.getStagedProductByNameReturns.result2
	}
}

func (fake *ConfigureDirectorService) GetStagedProductByNameCallCount() int {
	fake.getStagedProductByNameMutex.RLock()
	defer fake.getStagedProductByNameMutex.RUnlock()
	return len(fake.getStagedProductByNameArgsForCall)
}

func (fake *ConfigureDirectorService) GetStagedProductByNameArgsForCall(i int) string {
	fake.getStagedProductByNameMutex.RLock()
	defer fake.getStagedProductByNameMutex.RUnlock()
	return fake.getStagedProductByNameArgsForCall[i].name
}

func (fake *ConfigureDirectorService) GetStagedProductByNameReturns(result1 api.StagedProductsFindOutput, result2 error) {
	fake.GetStagedProductByNameStub = nil
	fake.getStagedProductByNameReturns = struct {
		result1 api.StagedProductsFindOutput
		result2 error
	}{result1, result2}
}

func (fake *ConfigureDirectorService) GetStagedProductManifest(guid string) (manifest string, err error) {
	fake.getStagedProductManifestMutex.Lock()
	fake.getStagedProductManifestArgsForCall = append(fake.getStagedProductManifestArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("GetStagedProductManifest", []interface{}{guid})
	fake.getStagedProductManifestMutex.Unlock()
	if fake.GetStagedProductManifestStub != nil {
		return fake.GetStagedProductManifestStub(guid)
	} else {
		return fake.getStagedProductManifestReturns.result1, fake.getStagedProductManifestReturns.result2
	}
}

func (fake *ConfigureDirectorService) GetStagedProductManifestCallCount() int {
	fake.getStagedProductManifestMutex.RLock()
	defer fake.getStagedProductManifestMutex.RUnlock()
	return len(fake.getStagedProductManifestArgsForCall)
}

func (fake *ConfigureDirectorService) GetStagedProductManifestArgsForCall(i int) string {
	fake.getStagedProductManifestMutex.RLock()
	defer fake.getStagedProductManifestMutex.RUnlock()
	return fake.getStagedProductManifestArgsForCall[i].guid
}

func (fake *ConfigureDirectorService) GetStagedProductManifestReturns(result1 string, result2 error) {
	fake.GetStagedProductManifestStub = nil
	fake.getStagedProductManifestReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ConfigureDirectorService) CreateStagedVMExtension(arg1 api.CreateVMExtension) error {
	fake.createStagedVMExtensionMutex.Lock()
	fake.createStagedVMExtensionArgsForCall = append(fake.createStagedVMExtensionArgsForCall, struct {
		arg1 api.CreateVMExtension
	}{arg1})
	fake.recordInvocation("CreateStagedVMExtension", []interface{}{arg1})
	fake.createStagedVMExtensionMutex.Unlock()
	if fake.CreateStagedVMExtensionStub != nil {
		return fake.CreateStagedVMExtensionStub(arg1)
	} else {
		return fake.createStagedVMExtensionReturns.result1
	}
}

func (fake *ConfigureDirectorService) CreateStagedVMExtensionCallCount() int {
	fake.createStagedVMExtensionMutex.RLock()
	defer fake.createStagedVMExtensionMutex.RUnlock()
	return len(fake.createStagedVMExtensionArgsForCall)
}

func (fake *ConfigureDirectorService) CreateStagedVMExtensionArgsForCall(i int) api.CreateVMExtension {
	fake.createStagedVMExtensionMutex.RLock()
	defer fake.createStagedVMExtensionMutex.RUnlock()
	return fake.createStagedVMExtensionArgsForCall[i].arg1
}

func (fake *ConfigureDirectorService) CreateStagedVMExtensionReturns(result1 error) {
	fake.CreateStagedVMExtensionStub = nil
	fake.createStagedVMExtensionReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConfigureDirectorService) ListStagedVMExtensions() ([]api.VMExtension, error) {
	fake.listStagedVMExtensionsMutex.Lock()
	fake.listStagedVMExtensionsArgsForCall = append(fake.listStagedVMExtensionsArgsForCall, struct{}{})
	fake.recordInvocation("ListStagedVMExtensions", []interface{}{})
	fake.listStagedVMExtensionsMutex.Unlock()
	if fake.ListStagedVMExtensionsStub != nil {
		return fake.ListStagedVMExtensionsStub()
	} else {
		return fake.listStagedVMExtensionsReturns.result1, fake.listStagedVMExtensionsReturns.result2
	}
}

func (fake *ConfigureDirectorService) ListStagedVMExtensionsCallCount() int {
	fake.listStagedVMExtensionsMutex.RLock()
	defer fake.listStagedVMExtensionsMutex.RUnlock()
	return len(fake.listStagedVMExtensionsArgsForCall)
}

func (fake *ConfigureDirectorService) ListStagedVMExtensionsReturns(result1 []api.VMExtension, result2 error) {
	fake.ListStagedVMExtensionsStub = nil
	fake.listStagedVMExtensionsReturns = struct {
		result1 []api.VMExtension
		result2 error
	}{result1, result2}
}

func (fake *ConfigureDirectorService) DeleteVMExtension(name string) error {
	fake.deleteVMExtensionMutex.Lock()
	fake.deleteVMExtensionArgsForCall = append(fake.deleteVMExtensionArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("DeleteVMExtension", []interface{}{name})
	fake.deleteVMExtensionMutex.Unlock()
	if fake.DeleteVMExtensionStub != nil {
		return fake.DeleteVMExtensionStub(name)
	} else {
		return fake.deleteVMExtensionReturns.result1
	}
}

func (fake *ConfigureDirectorService) DeleteVMExtensionCallCount() int {
	fake.deleteVMExtensionMutex.RLock()
	defer fake.deleteVMExtensionMutex.RUnlock()
	return len(fake.deleteVMExtensionArgsForCall)
}

func (fake *ConfigureDirectorService) DeleteVMExtensionArgsForCall(i int) string {
	fake.deleteVMExtensionMutex.RLock()
	defer fake.deleteVMExtensionMutex.RUnlock()
	return fake.deleteVMExtensionArgsForCall[i].name
}

func (fake *ConfigureDirectorService) DeleteVMExtensionReturns(result1 error) {
	fake.DeleteVMExtensionStub = nil
	fake.deleteVMExtensionReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConfigureDirectorService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateStagedDirectorAvailabilityZonesMutex.RLock()
	defer fake.updateStagedDirectorAvailabilityZonesMutex.RUnlock()
	fake.updateStagedDirectorNetworksMutex.RLock()
	defer fake.updateStagedDirectorNetworksMutex.RUnlock()
	fake.updateStagedDirectorNetworkAndAZMutex.RLock()
	defer fake.updateStagedDirectorNetworkAndAZMutex.RUnlock()
	fake.updateStagedDirectorPropertiesMutex.RLock()
	defer fake.updateStagedDirectorPropertiesMutex.RUnlock()
	fake.listStagedProductJobsMutex.RLock()
	defer fake.listStagedProductJobsMutex.RUnlock()
	fake.getStagedProductJobResourceConfigMutex.RLock()
	defer fake.getStagedProductJobResourceConfigMutex.RUnlock()
	fake.updateStagedProductJobResourceConfigMutex.RLock()
	defer fake.updateStagedProductJobResourceConfigMutex.RUnlock()
	fake.getStagedProductByNameMutex.RLock()
	defer fake.getStagedProductByNameMutex.RUnlock()
	fake.getStagedProductManifestMutex.RLock()
	defer fake.getStagedProductManifestMutex.RUnlock()
	fake.createStagedVMExtensionMutex.RLock()
	defer fake.createStagedVMExtensionMutex.RUnlock()
	fake.listStagedVMExtensionsMutex.RLock()
	defer fake.listStagedVMExtensionsMutex.RUnlock()
	fake.deleteVMExtensionMutex.RLock()
	defer fake.deleteVMExtensionMutex.RUnlock()
	return fake.invocations
}

func (fake *ConfigureDirectorService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
