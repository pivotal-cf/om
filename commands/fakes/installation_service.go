// This file was generated by counterfeiter
package fakes

import "sync"

type InstallationService struct {
	ExportStub        func(string) error
	exportMutex       sync.RWMutex
	exportArgsForCall []struct {
		arg1 string
	}
	exportReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *InstallationService) Export(arg1 string) error {
	fake.exportMutex.Lock()
	fake.exportArgsForCall = append(fake.exportArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Export", []interface{}{arg1})
	fake.exportMutex.Unlock()
	if fake.ExportStub != nil {
		return fake.ExportStub(arg1)
	} else {
		return fake.exportReturns.result1
	}
}

func (fake *InstallationService) ExportCallCount() int {
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	return len(fake.exportArgsForCall)
}

func (fake *InstallationService) ExportArgsForCall(i int) string {
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	return fake.exportArgsForCall[i].arg1
}

func (fake *InstallationService) ExportReturns(result1 error) {
	fake.ExportStub = nil
	fake.exportReturns = struct {
		result1 error
	}{result1}
}

func (fake *InstallationService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	return fake.invocations
}

func (fake *InstallationService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
